# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: mp4converter
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: ruby2.7
  region: ${self:custom.region}
  environment:
    API_ENDPOINT_DEV: ${self:custom.api_endpoint_dev}
    API_ENDPOINT_STAG: ${self:custom.api_endpoint_stag}
    API_ENDPOINT_PROD: ${self:custom.api_endpoint_prod}
    BUCKET_DEV: ${self:custom.development_bucket}
    BUCKET_STAG: ${self:custom.staging_bucket}
    BUCKET_PROD: ${self:custom.production_bucket}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:ListBucket
      Resource: 
        - arn:aws:s3:::${self:custom.development_bucket}
        - arn:aws:s3:::${self:custom.development_bucket}/*
        - arn:aws:s3:::${self:custom.staging_bucket}
        - arn:aws:s3:::${self:custom.staging_bucket}/*
        - arn:aws:s3:::${self:custom.production_bucket}
        - arn:aws:s3:::${self:custom.production_bucket}/*

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  convert:
    handler: handler.convert
    timeout: ${self:custom.timeout}
    events:
      - s3:
          bucket: ${self:custom.development_bucket}
          event: s3:ObjectCreated:*
          existing: true
      - s3:
          bucket: ${self:custom.staging_bucket}
          event: s3:ObjectCreated:*
          #existing: true
      - s3:
          bucket: ${self:custom.production_bucket}
          event: s3:ObjectCreated:*
          #existing: true
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - {Ref: FfmpegLambdaLayer}

layers:
  ffmpeg:
    path: layer
    
custom:
  development_bucket: ${env:BUCKET_DEV, 'knovi-dev'}
  staging_bucket: ${env:BUCKET_STAG, 'knovi-stag'}
  production_bucket: ${env:BUCKET_PROD, 'knovi-prod'}
  region: ${env:AWS_REGION, 'eu-central-1'}
  api_endpoint_dev: 'https://85a9a24c0ca5.ngrok.io/api/v1/update_attachment.json'
  api_endpoint_stag: 'https://staging-url/api/v1/update_attachment.json'
  api_endpoint_prod: 'https://prod-url/api/v1/update_attachment.json'
  timeout: 60
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
